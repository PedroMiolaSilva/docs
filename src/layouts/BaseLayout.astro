---
import type { CollectionEntry } from 'astro:content';

import HeadCommon from '~/components/HeadCommon.astro';
import HeadSEO from '~/components/HeadSEO.astro';
import LeftSidebar from '~/components/LeftSidebar/LeftSidebar.astro';
import Trd3 from '~/components/html/trd3.astro';
// @ts-nocheck
import Header from '@aziontech/webkit/header';
import AzionLogo from '@aziontech/webkit/azionlogo';
import HeaderMenuTabPanel from '@aziontech/webkit/headermenutabpanel';
import HeaderSearchDialog from '@aziontech/webkit/headersearchdialog';
import HeaderRightSidebar from '@aziontech/webkit/headerrightsidebar';
import Footer from '@aziontech/webkit/footer';
import SystemStatus from '@aziontech/webkit/systemstatus';
import SelectLang from '@aziontech/webkit/selectlang';

import { getLanguageFromURL } from '~/util';
import { getPageCategory } from '~/util/getPageCategory';
import { getTranslatedPagesByNamespace } from '~/util/getPageTranslations';
import { getHeaderMenuStrings, getFooterMenuStrings } from '~/i18n/translations';

import { normalizeLangTag } from '~/i18n/bcp-normalize';
import { rtlLanguages } from '~/i18n/languages';
import { useTranslations } from '~/i18n/util';

export interface Props {
	content: CollectionEntry<'docs'>['data'];
}

import 'primeflex/primeflex.css';
import 'primeicons/primeicons.css';
import '~/styles/icons/azionicons.scss'; // azion icons css
import '~/styles/main.css';
import '~/styles/avatar.css';
// import '~/styles/checkbox.css';
// import '~/styles/input.css';
import '~/styles/button.css';
// import '~/styles/tab-menu.css';
import '~/styles/breadcrumb.css';
import '~/styles/divider.css';

const { content } = Astro.props;
const isFallback = !!Astro.params.fallback;
const url = Astro.url;
const lang = getLanguageFromURL(url.pathname);
const direction = rtlLanguages.has(lang) ? 'rtl' : 'ltr';
const bcpLang = normalizeLangTag(lang);
const currentPage = url.pathname;

const {
	menuData,
	menuSecondary,
	menuSecondaryMobile,
	bottomButtonsMobile,
	algoliaIndex,
	algoliaModel,
	algoliaInputPlaceholder,
} = getHeaderMenuStrings(currentPage);

const { listData, copyright, cta, socialButtons } = getFooterMenuStrings(currentPage);

const t = useTranslations(Astro);
const formatTitle = (content: { title?: string }) => {
	return content.title ? `${content.title} - ${t('site.title')}` : t('site.title');
};
// Ensures the canonicalURL always has a trailing slash.
const canonicalURL = new URL(Astro.url.pathname.replace(/([^/])$/, '$1/'), Astro.site);
if (isFallback) canonicalURL.pathname = canonicalURL.pathname.replace(`/${lang}/`, '/en/');

const translatedPages = await (async (c) => {
	let translatedPages = c.namespace ? await getTranslatedPagesByNamespace(c.namespace) : [];
	
	return translatedPages.map((page) => {
		page.langPrefix = page.lang;
		page.slug = `/${page.lang}/${page.slug}/`;
		page.lang = page.lang === 'pt-br' ? 'PortuguÃªs' : 'English';
		return page;
	});
})(content);
---

<html dir={direction} lang={bcpLang} class="azion-dark">
	<head>
		<HeadCommon />
		<HeadSEO content={content} canonicalURL={canonicalURL} {translatedPages} />
		<title set:html={formatTitle(content)} />

		<style>
			#left-sidebar {
				display: none;
				z-index: 10;
				inset-inline-start: 0;
				max-height: 100%;
			}

			#right-sidebar {
				display: none;
				inset-inline-end: 0;
			}
			
			#main-content {
				display: flex;
				flex-direction: column;
				height: 100%;
				min-width: 0;
			}

			.layout {
				display: grid;
				grid-template-columns: 1fr;
				height: 100%;
			}

			@media not screen and (min-width: 768px) {
				:global(.mobile-sidebar-toggle #left-sidebar) {
					display: block;
					top: 3rem;
					inset-inline-end: 0;
				}

				:global(.mobile-sidebar-toggle) {
					overflow: hidden;
				}
				:global(.mobile-sidebar-toggle .main-column) {
					visibility: hidden;
				}
				:global(.mobile-sidebar-toggle #left-sidebar ul) {
					overscroll-behavior: contain;
				}
			}

			/**
			*
			* https://tailwindcss.com/docs/responsive-design
			* respecting the tailwind breakpoints
			*/
			@media (min-width: 1024px) {
				#left-sidebar {
					display: block;
					/* padding-inline-start: 0.25rem; */
					padding: 0 0.25rem;
					top: var(--theme-navbar-height);
					background: transparent;
					min-width: 190px;
					max-width: 320px;
				}

				.layout {
					grid-template-columns: 18.75rem 1fr;
					gap: 1rem;
				}
			}

			@media (min-width: 1280px) {
				#right-sidebar {
					display: flex;
				}

				.layout {
					grid-template-columns: 18.75rem 1fr 18.75rem;
					gap: 1rem;
				}
			}
		</style>
	</head>

	<body class="surface-ground">
		<Header {menuSecondary}>
			<AzionLogo
				slot="visualid"
				href={`/${lang}/`}
				hrefTitle="Home | Azion Technologies"
				target="_self"
			/>

			<Fragment slot="navigation">
				<HeaderMenuTabPanel client:load menuData={menuData} />
			</Fragment>

			<Fragment slot="dialog">
				<HeaderSearchDialog
					client:only="vue"
					algoliaAppId="PYJUZH6VNQ"
					algoliaApiKey="7c1795c333053265edd2aeb199745797"
					algoliaIndex={algoliaIndex}
					algoliaModel={algoliaModel}
					inputPlaceholder={algoliaInputPlaceholder}
				/>
			</Fragment>

			<Fragment slot="mobile-right-sidebar">
				<HeaderRightSidebar
					client:only="vue"
					menuData={menuData}
					menuSecondary={menuSecondaryMobile}
					bottomButtons={bottomButtonsMobile}
				/>
				<!-- <LeftSidebar
						currentPage={currentPage}
						menuType={content.menu_namespace}
					/> -->
			</Fragment>
		</Header>

		<main class="layout">
			<aside id="left-sidebar" class="border-r surface-border pt-8 pb-8">
				<div class="sidebar">
					<LeftSidebar
						currentPage={currentPage}
						menuType={content.menu_namespace}
					/>
				</div>
			</aside>

			<div id="main-content" class="main-column pt-4">
				<slot />

				<span id="docsearch-lvl0" hidden>
					{getPageCategory(url)}
				</span>
			</div>

			<aside id="right-sidebar">
				<div class="sidebar">
					<slot name="secondary-sidebar" />
				</div>
			</aside>
		</main>

		<slot name="footer">
			<Footer {listData} {lang} {copyright} {cta} {socialButtons}>
				<Fragment slot="action">
					<!-- <DropdownLangSelector i18nPages={translatedPages} {lang} client:visible /> -->
					<SelectLang i18nPages={translatedPages} {lang} client:visible />
				</Fragment>
				<Fragment slot="system-status">
					<SystemStatus {lang} client:idle />
				</Fragment>
				<Fragment slot="theme-switch">
					<!-- <DropdownThemeSwitch client:visible /> -->
					<!-- <SelectTheme client:visible /> -->
				</Fragment>
			</Footer>
		</slot>

		<Trd3 />
	</body>
</html>
