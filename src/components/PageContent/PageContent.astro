---
import FallbackNotice from '../FallbackNotice.astro';
import ArticleNavigationButton from './ArticleNavigationButton.astro';

import Breadcrumb from 'primevue/breadcrumb';
import ReadableContent from '@aziontech/webkit/readablecontent';

import { rtlLanguages } from '~/i18n/languages';
import { normalizeLangTag } from '~/i18n/bcp-normalize';

import { getLanguageFromURL } from '~/util';
import { getPageBreadcrumb } from '~/util/getBreadcrumb';

export interface Props {
	content: { title: string };
	previous?: { text: string; link: string };
	next?: { text: string; link: string };
}

const {content, previous, next} = Astro.props;
const lang = getLanguageFromURL(Astro.url.pathname);
const isFallback = !!Astro.params.fallback || undefined;

const title = content.title.replace('@astrojs/', '<span class="scope">@astrojs/</span><wbr>').replaceAll('-', '&#8288;-&#8288;');
const bcpLang = normalizeLangTag(lang);
const direction = rtlLanguages.has(lang) ? 'rtl' : 'ltr';
const breadcrumbs = await getPageBreadcrumb(Astro, lang);
---


<div dir={isFallback ? 'ltr' : direction} lang={isFallback && 'en'}>
	{
		// For best cross-browser support of sticky or fixed elements, they must not be nested
		// inside elements that hide any overflow axis. The article hides `overflow-x`,
		// so we must place fixed UI elements like the mobile TOC here.
		Astro.slots.has('before-article') && (
			<>
				<div class="fixed-mobile-bar" dir={direction}>
					<slot name="before-article" />
				</div>
				<div class="spacer" />
			</>
		)
	}
	<article id="article" class="content">
		<section class="main-section">
			<div class="h-[24px] my-4">
				<Breadcrumb
					client:only="vue"
					home={{icon: 'pi pi-home', url: `/${lang}/`}}
					model={breadcrumbs}
				/>
			</div>
			<!-- <Breadcrumb breadcrumbs={breadcrumbs} lang={lang}/> -->
			
			<ReadableContent client:only="vue">
				<header>
					<slot name="before-title" />
					<h1 class="content-title" set:html={title} />
					<slot name="after-title" />
				</header>
				
				{
					isFallback && (
						<div lang={bcpLang} dir={direction}>
							<FallbackNotice />
						</div>
					)
				}
			</ReadableContent>
			
			<slot />
		</section>
	
		{
			(previous || next) && (
				<aside class="next-previous-nav justify-center grid lg:flex gap-3 lg:gap-6 mb-8">
					{previous && <ArticleNavigationButton rel="prev" item={previous} />}
					{next && <ArticleNavigationButton rel="next" item={next} />}
				</aside>
			)
		}
	</article>
</div>
