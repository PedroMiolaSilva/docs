---
const {header, lang, metric_slug, product_slug} = Astro.props;

async function fetchPricingData() {
  const response = await fetch(`https://z4azz7gp65.map.azionedge.net/api/pricing/get/groupby/product_slug/${product_slug}`);
  return await response.json();
}

const pricingData = await fetchPricingData();

function transformData(data) {
  const tiers = {};

  function normalizeRegionName(region) {
    const mappings = {
      'United States': 'USA',
      'All Other Regions': 'Other_Regions'
    };
    return mappings[region] || region.replace(' ', '_');
  }

  const filteredData = data.filter(item => item.metric_slug === (metric_slug || ''));

  filteredData.forEach(item => {
    const tier = item.tier_name;
    const region = normalizeRegionName(item.region);
    const price = lang === 'pt-br' ? item.brazilian_real : item.american_dollar;
    const priceFormatted = `${price} ${(lang === 'pt-br' ? 'R$' : 'USD')}`;

    if (!tiers[tier]) {
      tiers[tier] = {
        'USA': '',
        'Canada': '',
        'Europe': '',
        'Brazil': '',
        'Latam': '',
        'Other_Regions': ''
      };
    }

    tiers[tier][region] = priceFormatted;
  });

  return tiers;
}

const transformedData = transformData(pricingData);
---

<table>
  <thead>
    <tr>
			{header.map((item) => <th>{item}</th>)}
    </tr>
  </thead>
  <tbody>
    {Object.entries(transformedData).map(([tierName, prices]) => (
      <tr>
        <td>{tierName}</td>
        <td>{prices.USA || '-'}</td>
        <td>{prices.Canada || '-'}</td>
        <td>{prices.Europe || '-'}</td>
        <td>{prices.Brazil || '-'}</td>
        <td>{prices.Latam || '-'}</td>
        <td>{prices.Other_Regions || '-'}</td>
      </tr>
    ))}
  </tbody>
</table>
