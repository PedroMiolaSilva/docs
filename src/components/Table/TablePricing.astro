---
const { lang, metric, metric_slug, product_slug, billing} = Astro.props;

async function fetchPricingData() {
  const response = await fetch(`https://z4azz7gp65.map.azionedge.net/api/pricing/get/product_slug/${product_slug}`);
  return await response.json();
}

const pricingData = await fetchPricingData();

function transformData(data) {
  const tiers = {};

  function normalizeRegionName(region) {
    const mappings = {
      'United States': 'USA',
      'All Other Regions': 'Other_Regions'
    };
    return mappings[region] || region.replace(' ', '_');
  }
  const filteredData = data.filter(item => item.metric_slug === (metric_slug || ''));

  filteredData.forEach(item => {
    const tier = item.tier_name;
    const region = normalizeRegionName(item.region);
    const price = lang === 'pt-br' ? item.brazilian_real : item.american_dollar;
    const priceFormatted = `${price} ${(lang === 'pt-br' ? 'R$' : 'USD')}`;

    if (!tiers[tier]) {
      tiers[tier] = {
        'USA': '',
        'Canada': '',
        'Europe': '',
        'Brazil': '',
        'Latam': '',
        'Other_Regions': ''
      };
    }

    tiers[tier][region] = priceFormatted;
  });

  return tiers;
}

const transformedData = transformData(pricingData);
---

<style lang="scss">
	.content-pricing-table {
		width: 100%;
		overflow-x: scroll;
		flex-wrap: nowrap;
	}
</style>

<div class="content-pricing-table">
	<table>
		<thead>
			<tr>
				<th>{metric}</th>
				{billing.map((item) => <th>{item}</th>)}
			</tr>
		</thead>
		<tbody>
			{Object.entries(transformedData).map(([tierName, prices]) => (
				<tr>
					<td>{tierName}</td>
					{
						Object.entries(prices).map((price) => (price[1] ? <td>{price[1]}</td> : null))
					}
				</tr>
			))}
		</tbody>
	</table>
</div>
