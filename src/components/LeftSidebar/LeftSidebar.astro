---
import { removeLeadingSlash } from '../../util';
import { getNavigationMenu } from '../../util/getNav';
import { useTranslations } from '../../i18n/util';
import SidebarContent from './SidebarContent.astro';
import CommunityMenu from '../RightSidebar/CommunityMenu.astro';
import ThemeToggleButton from '../Header/ThemeToggleButton';

export interface Props {
	currentPage: string;
	menuType: string;
}

const t = useTranslations(Astro);

const { currentPage, menuType = 'nav' } = Astro.props as Props;
const currentPageMatch = removeLeadingSlash(currentPage);

const sidebarSections = (await getNavigationMenu(Astro, menuType)).reduce((collection, item) => {
	if ('header' in item) {
		collection.push({ ...item, children: [] });
	} else {
		collection[collection.length - 1].children.push(item);
	}
	return collection;
}, [] as Parameters<typeof SidebarContent>[0]['sidebarSections']);

const learnSections = sidebarSections.filter((section) => section.type === 'learn');

let activeTab: 'learn' = 'learn';

// Certain pages are not in the sidebar nav, so we manually set the active tab based on other factors (e.g. Algolia page category).
const base = currentPageMatch.split('/').slice(1, 3).join('/');
for (const section of sidebarSections) {
	if (section.children.some((item) => item.slug === base)) {
		activeTab = 'learn';
	}
}
---

<nav aria-label={t('leftSidebar.a11yTitle')}>
	<ul class={`nav-groups`}>
		<SidebarContent
			type={'learn'}
			defaultActiveTab={activeTab}
			sidebarSections={learnSections}
			currentPageMatch={currentPageMatch}
		/>
		<li>
			<CommunityMenu hideOnLargerScreens={true} />
		</li>
	</ul>
</nav>

<!-- Preserve sidebar scroll across page loads -->
<script is:inline>
{
	const leftSidebar = document.querySelector('.nav-groups');
	const leftSidebarScroll = localStorage.getItem('sidebar-scroll');
	if (leftSidebarScroll !== null) {
		leftSidebar.scrollTop = parseInt(leftSidebarScroll, 10);
	}
	window.addEventListener('beforeunload', () => {
		localStorage.setItem('sidebar-scroll', leftSidebar.scrollTop);
	});
}
</script>

<style>
	nav {
		width: 100%;
		height: 100%;
		font-size: var(--theme-text-sm);
	}
	.nav-groups {
		padding-top: 1rem;
		max-height: 100%;
		overflow-x: visible;
		overflow-y: auto;
	}

	@media (min-width: 50em) {
		.nav-groups {
			position: fixed;
			top: var(--theme-navbar-height);
			bottom: 0;
			width: calc(var(--theme-left-sidebar-width) - var(--min-spacing-inline) * 1.6);
		}
	}

	@media not screen and (min-width: 50em) {
		nav :global(.TabGroup) {
			display: none;
		}
	}
</style>
